The Unix Shell
========================================================
author: Chris Cole
date: March 2018
autosize: true

Background
========================================================

At a high level, computers do four things:

- run programs
- store data
- communicate with each other
- interact with us

Interaction can be done in many different ways:

- Keyboard & mouse
- Touch screen
- Speech
- etc

Graphical User Interfaces (GUIs)
================================

Nowadays the most common way to interact with a computer is via a Graphical User Interface (GUI).

![GUI example](gui.png)

They respond to mouse clicks and you interact with them via menus, icons and windows. 

Each of these elements have commands attached to them to translate the instruction into the relevant action by the computer.

The Shell
===============================

The shell is a program like any other, but instead you interact with it via a _command-line_ interface. It is most commonly used to run other programs.

There are many different flavours of the shell, the most common (and usually the default) being _bash_ (the Bourne again SHell). 

The heart of the command-line is the _read-evaluate-print_ loop (**REPL**) which occurs every time you press the Enter/Return key.

1. Reads command
2. Evaluates (or executes) it
3. Prints the output

How does it look?
==============================

A typical command looks a bit like this:

    bash-3.2$ 
    bash-3.2$ ls -F / 
    Applications/         System/
    Library/              Users/
    Network/              Volumes/
    bash-3.2$ 

What's going on?
============================

If we go back to the **REPL** definition.

1. Read: ls -F /
2. Evaluate:
    ls  <- command (case is important)
    -F  <- flag (optional)
    /   <- argument
3. Print

What do errors look like?
===================================

What happens if you mistype a command? Will the world end?!

Surprisingly no! Usually just get a (self-explanatory) error.

     $ ls-F /
     -bash: ls-F: command not found

***

![mushroom cloud](713777.jpg)

What do errors look like?
===================================

What happens if you mistype a command? Will the world end?!

Surprisingly no! Usually just get a (self-explanatory) error.

     $ ls - F 
     ls: -: No such file or directory
     ls: F: No such file or directory

***

![mushroom cloud](713777.jpg)

Is it difficult?
=================================
incremental: true

Yes and no.

Yes:
* it is very different 
* unforgiving. Little mistakes are as important as big ones
* requires knowledge (and Google :))
* no help

***
No:
* consistent and logical
* explicit
* extremely flexible
* lots of help


Contrived Example: Nelle's Pipeline
==========================================
type: section

Overview
======================

Nelle Nemo, a marine biologist, has just returned from a six-month survey of the North Pacific Gyre, where she has been sampling gelatinous marine life in the Great Pacific Garbage Patch. She has 1520 samples in all and now needs to:

* Assay each sample for the relative abundance of 300 different proteins. 
* Calculate statistics for each of the proteins separately using a program her supervisor wrote called _goostats_.
* Write up results by the end of the month to appear in an upcoming special issue of Aquatic Goo Letters.

**Issues**
* Each sample takes 30min to assay, but she has eight machines that can be run in parallel. Should take about 2 weeks.
* _goostats_ has be run by hand. Enter filenames and hit "OK" 1520 times.
* At 30sec per sample will 12 hours non-stop. More like 2-3 days.

Can this be done better?


Navigating Files and Directories
================================

**Questions**
* How can I move around on my computer?
* How can I see what files and directories I have?
* How can I specify the location of a file or directory on my computer?

**Objectives**
* Explain the similarities and differences between a file and a directory.
* Translate an absolute path into a relative path and vice versa.
* Construct absolute and relative paths that identify specific files and directories.
* Demonstrate the use of tab completion, and explain its advantages.

The Filesystem
=======================
title: true

The operating system is in charge of storing your files and directories (folders) via the **file system**. The filesystem stores information about files like location, size, permissions, etc. 

When you first open a shell window the command prompt will be in your "home directory".

    $ pwd
    /Users/nelle

_pwd_ shows you the **path** to the current **working directory**.

The filesystem
==============================
title: false

The filesystem is heirarchical. 

![filesystem](filesystem.svg)

With all files and directories being stems from the **root**, '/', at the top of the tree.


![filesystem](filesystem.svg)


